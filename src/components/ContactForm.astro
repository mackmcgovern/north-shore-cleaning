---
// component: ContactForm
---

<form
  class='contact-form px-4 py-12 sm:px-16 sm:py-16 border-4 border-opacity-20 shadow-sm border-teal-main bg-teal-main bg-opacity-5'
  id='contact-form'>
  <div class='form-item name'>
    <label for='name'>Name:</label>
    <input type='text' id='name' name='name' required />
  </div>
  <div class='form-item email'>
    <label for='email'>Email:</label>
    <input type='email' id='email' name='email' required />
  </div>
  <div class='form-item phone'>
    <label for='phone'>Phone Number:</label>
    <input type='tel' id='phone' name='phone' required />
  </div>
  <div class='form-item subject'>
    <label for='subject'>Subject:</label>
    <input type='text' id='subject' name='subject' required />
  </div>
  <div class='form-item' id='honeypot' aria-hidden='true'>
    <label for='honeypot'>If you are a human, do not fill in this field.</label>
    <input type='text' id='honeypot' name='honeypot' aria-hidden='true' />
  </div>
  <div class='form-item message'>
    <label for='message'>Message:</label>
    <textarea id='message' name='message' required></textarea>
  </div>
  <div class='errors my-4'>
    <p class='form-errors text-sm text-red-700'></p>
  </div>

  <button
    type='submit'
    class='btn btn-light bg-accent-blue self-center mt-6 w-[15rem] text-center submit-btn'
    >Submit</button
  >
</form>

<style>
  .contact-form {
    @apply flex flex-col gap-4 max-w-6xl w-full md:w-[90%] lg:w-[80%];
  }

  .contact-form > div {
    @apply flex flex-col;
  }

  .contact-form label {
    @apply text-teal-main font-light;
  }

  .contact-form input,
  .contact-form textarea {
    @apply border border-teal-main border-opacity-50 text-teal-main font-normal;
  }

  .contact-form input:focus,
  .contact-form textarea:focus {
    @apply bg-accent-blue bg-opacity-30;
  }

  .contact-form textarea {
    @apply h-[8rem];
  }

  #honeypot {
    display: none;
  }

  .submit-btn:disabled {
    @apply opacity-50 cursor-default hover:shadow-none;
  }

  .error input {
    @apply border-red-700;
  }

  .error label {
    @apply text-red-700;
  }
</style>

<script>
  import { validateEmail } from '../../src/utils/validateEmail'
  import { validateInput } from '../../src/utils/validateInput'
  import { validateName } from '../../src/utils/validateName'
  import { validatePhone } from '../utils/validatePhone'

  const contactForm = document.querySelector('#contact-form') as HTMLFormElement
  const submitBtn = document.querySelector('.submit-btn') as HTMLButtonElement
  const formErrors = document.querySelector('.form-errors') as HTMLDivElement
  const formItems = document.querySelectorAll(
    '.form-item'
  ) as NodeListOf<HTMLDivElement>

  let isValid: boolean
  let errorsArray: string[] = []
  let errorMessage: string[] = []

  const setLoadingState = function (isLoading: boolean) {
    if (isLoading) {
      submitBtn.disabled = true
      submitBtn.textContent = 'Sending...'
    } else {
      submitBtn.disabled = false
      submitBtn.textContent = 'Submit'
    }
  }

  contactForm.addEventListener('submit', async function (e) {
    e.preventDefault()
    setLoadingState(true)
    isValid = true
    errorsArray = []
    errorMessage = []

    let formData = new FormData(this)

    // Create an object to hold the trimmed data
    const data: { [key: string]: any } = {}

    formData.forEach((value, key) => {
      if (typeof value === 'string') {
        data[key] = value.trim()
      } else {
        data[key] = value
      }
    })

    // Check if the honeypot field is filled
    if (data['honeypot'] !== '') {
      formErrors.textContent = 'Spam detected. Please try again.'
      console.log(data['honeypot'])

      setLoadingState(false)
      contactForm.reset()
      return
    }

    const trimmedData = {
      name: data['name'],
      email: data['email'],
      phone: data['phone'],
      subject: data['subject'],
      honeypot: data['honeypot'],
      message: data['message'],
    }

    // Validate the form data
    if (!validateName(trimmedData.name)) {
      // formErrors.innerHTML = '<p class="text-sm text-red-600">Please enter a valid name</p>'
      isValid = false
      errorsArray.push('name')
      if (trimmedData.name === '') {
        errorMessage.push('Name is required.')
      } else {
        errorMessage.push('Name must be at least 2 characters long.')
      }
    }

    if (!validateEmail(trimmedData.email)) {
      isValid = false
      errorsArray.push('email')
      if (trimmedData.email === '') {
        errorMessage.push('Email is required.')
      } else {
        errorMessage.push('Email is not valid.')
      }
    }

    if (!validatePhone(trimmedData.phone)) {
      isValid = false
      errorsArray.push('phone')
      if (trimmedData.phone === '') {
        errorMessage.push('Phone number is required.')
      } else {
        errorMessage.push('Phone number is invalid.')
      }
    }

    if (!validateInput(trimmedData.subject)) {
      isValid = false
      errorsArray.push('subject')
      if (trimmedData.subject === '') {
        errorMessage.push('Subject is required.')
      } else {
        errorMessage.push('Subject must be at least 2 characters long.')
      }
    }

    if (!validateInput(trimmedData.message)) {
      isValid = false
      errorsArray.push('message')
      if (trimmedData.message === '') {
        errorMessage.push('Message is required.')
      } else {
        errorMessage.push('Message must be at least 2 characters long.')
      }
    }

    console.log(isValid, errorsArray, errorMessage)

    formItems.forEach(item => {
      item.classList.remove('error')

      errorsArray.map(error => {
        if (item.classList.contains(error)) {
          item.classList.add('error')
        }
      })
    })

    if (!isValid) {
      formErrors.textContent = errorMessage.join('\n')
      setLoadingState(false)
      return
    }

    // send data to netlify function
    const response = await fetch('/netlify/functions/contact-form', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(trimmedData),
    })
    const result = await response.json()
    console.log(result)

    if (response.ok) {
      setLoadingState(false)
      contactForm.reset()
      window.location.href = '/contact/success'
    } else {
      formErrors.textContent = result.message
      setLoadingState(false)
    }
  })
</script>
